from collections import namedtuple

from planetary_gear.gear_input_file_functions import create_quarter_model
from planetary_gear.gear_input_file_functions import write_sets_file

CarburizationData = namedtuple('CarburizationStep', ['time', 'temperature', 'carbon'])
TemperatureData = namedtuple('TemperatureData', ['time', 'temperature', 'interaction_property_name'])
QuenchingData = namedtuple('QuenchingData', ['time', 'temperature', 'oil_name'])


class CaseHardeningToolbox:
    def __init__(self, name, include_file_name):
        self.include_file_directory = ''

        self.name = name
        self.include_file_name = include_file_name

        self.material = 'U925062'

        self.initial_temperature = 20.
        self.initial_carbon = 0.0022

        self.diffusion_file = None
        self.interaction_property_file = None

        self.heating_data = CarburizationData(time=None, temperature=self.initial_temperature,
                                              carbon=self.initial_carbon)
        self.carburization_steps = []
        self.furnance_interaction_property = 'FURNACE'
        self.quenching_data = QuenchingData(time=None, temperature=None, oil_name='QUENCHWAY125B_Used_0mps')
        self.cooldown_data = TemperatureData(time=None, temperature=80, interaction_property_name='AIR_COOL')
        self.tempering_data = TemperatureData(time=None, temperature=None, interaction_property_name='HOT_AIR')

        self.carbon_file_lines = None
        self.thermal_file_lines = None
        self.mechanical_file_lines = None

        self.total_time = 0.
        self.thermal_step_counter = 1

    def _init_carbon_file_lines(self):
        return ['**',
                '**',
                '** Autogenerated input file created by Case Hardening Simulation Toolbox, version 0.8.1',
                '** Written by Niklas Melin and Erik Olsson',
                '**',
                '*Heading',
                '\t Case Hardening Simulation Toolbox - Carburization - Niklas Melin 2012',
                '*Preprint, echo=NO, model=NO, history=NO, contact=NO',
                '**',
                '** ----------------------------------------------------------------',
                '** Load required include files',
                '**',
                '**   Load geometry',
                '*INCLUDE, INPUT = ' + self.include_file_directory + 'Toolbox_Carbon_' +
                self.include_file_name + '_geo.inc',
                '** Load geometry set definitions',
                '*INCLUDE, INPUT = ' + self.include_file_directory + self.include_file_name + '_sets.inc'
                '**',
                '** ----------------------------------------------------------------',
                '**',
                '**   Define material properties',
                '**',
                '*Solid Section, elset=All_Elements, material=' + self.material,
                '\t1.0'
                '*Hourglass Stiffness'
                '\t225.0, 0.0, 0.0'
                '**',
                '** DEFINE MATERIAL PROPERTIES',
                '**',
                '*Material, name=' + self.material,
                '\t*Density'
                '\t\t7.83e-06,'
                '\t*INCLUDE, INPUT = ' + self.diffusion_file,
                '\t*Solubility',
                '\t\t1.0',
                '**',
                '**',
                '*INITIAL CONDITIONS, TYPE=CONCENTRATION',
                '\tAll_Nodes , ' + str(self.initial_carbon),
                '*INITIAL CONDITIONS, TYPE=TEMPERATURE',
                '\tAll_Nodes , ' + str(self.initial_temperature),
                '**']

    def _init_thermal_lines(self):
        return ['**',
                '**',
                '** Autogenerated input file created by Case Hardening Simulation Toolbox, version 0.8.1',
                '** Written by Niklas Melin and Erik Olsson',
                '**',
                '*Heading',
                '\t Case Hardening Simulation Toolbox - Thermal - Niklas Melin 2012',
                '*Preprint, echo=NO, model=NO, history=NO, contact=NO',
                '**',
                '** ----------------------------------------------------------------',
                '** Load required include files',
                '**',
                '**   Load geometry',
                '*INCLUDE, INPUT = ' + self.include_file_directory +
                'Toolbox_Thermal_' + self.include_file_name + '_geo.inc',
                '** Load geometry set definitions',
                '*INCLUDE, INPUT = ' + self.include_file_directory + self.include_file_name + '_sets.inc',
                '**',
                '** ----------------------------------------------------------------',
                '**',
                '**   Define material properties',
                '**',
                '*Solid Section, elset=All_Elements, material=' + self.material,
                '\t1.0'
                '*Hourglass Stiffness'
                '\t225.0, 0.0, 0.0'
                '**',
                '** DEFINE MATERIAL PROPERTIES',
                '**',
                '*Material, name=' + self.material,
                '\t*Density',
                '\t\t7.83e-06,',
                '\t*Depvar',
                '\t\t100',
                '\t\t1,  CARBON,       VOLUME FRACTION of CARBON',
                '\t\t2,  HARDNESS,     Hardness in Rockwell C',
                '\t\t21, AUSTENITE,    VOLUME FRACTION of AUSTENITE',
                '\t\t34, FERRITE,      VOLUME FRACTION of FERRITE',
                '\t\t47, PEARLITE,     VOLUME FRACTION of PEARLITE',
                '\t\t60, UBAINITE,     VOLUME FRACTION of UPPER BAINITE',
                '\t\t73, LBAINITE,     VOLUME FRACTION of LOWER BAINITE',
                '\t\t86, Q_MARTENSITE, VOLUME FRACTION of QUENCHED MARTENSITE',
                '\t\t99, T_MARTENSITE, VOLUME FRACTION of TEMPERED MARTENSITE',
                '\t*User Material, constants=8, type=THERMAL',
                '\t\t7.83e-06, 0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00'
                '**',
                '** ----------------------------------------------------------------',
                '*INCLUDE, INPUT = ' + self.interaction_property_file,
                '** ----------------------------------------------------------------',
                '** Set initial temperature',
                '*INITIAL CONDITIONS, TYPE=TEMPERATURE',
                '\tALL_NODES , ' + str(self.initial_temperature),
                '**',
                '** Set initial carbon content',
                '*INITIAL CONDITIONS, TYPE=FIELD, VAR=1',
                '\tALL_NODES , ' + str(self.initial_carbon),
                '**',
                '** Set analysis kinematics type to -8, (2 heating up kinetics, -2 cooling kinetics without tempering',
                '*INITIAL CONDITIONS, TYPE=FIELD, VAR=2',
                '\tALL_NODES , -8',
                '**']

    def _init_mechanical_lines(self):
        return ['**',
                '**',
                '** Autogenerated input file created by Case Hardening Simulation Toolbox, version 0.8.1',
                '** Written by Niklas Melin and Erik Olsson',
                '**',
                '*Heading',
                '\t Case Hardening Simulation Toolbox - Mechanical - Niklas Melin 2012',
                '*Preprint, echo=NO, model=NO, history=NO, contact=NO',
                '**',
                '** ----------------------------------------------------------------',
                '** Load required include files',
                '**',
                '**   Load geometry',
                '*INCLUDE, INPUT = ' + self.include_file_directory + 'Toolbox_Mechanical_'
                + self.include_file_name + '_geo.inc',
                '** Load geometry set definitions',
                '*INCLUDE, INPUT = ' + self.include_file_directory + self.include_file_name + '_sets.inc',
                '**',
                '** ----------------------------------------------------------------',
                '**',
                '**   Define material properties',
                '**',
                '*Solid Section, elset=All_Elements, material=' + self.material,
                '\t1.0'
                '*Hourglass Stiffness'
                '\t225.0, 0.0, 0.0'
                '**',
                '** DEFINE MATERIAL PROPERTIES',
                '**',
                '*Material, name=' + self.material,
                '\t*Density',
                '\t\t7.83e-06,',
                '\t*Depvar',
                '\t\t100',
                '\t\t1,  CARBON,       VOLUME FRACTION of CARBON',
                '\t\t2,  HARDNESS,     Hardness in Rockwell C',
                '\t\t5,  PLASTIC STRAIN, EFFECTIVE PLASTIC STRAIN',
                '\t\t21, AUSTENITE,    VOLUME FRACTION of AUSTENITE',
                '\t\t34, FERRITE,      VOLUME FRACTION of FERRITE',
                '\t\t47, PEARLITE,     VOLUME FRACTION of PEARLITE',
                '\t\t60, UBAINITE,     VOLUME FRACTION of UPPER BAINITE',
                '\t\t73, LBAINITE,     VOLUME FRACTION of LOWER BAINITE',
                '\t\t86, Q_MARTENSITE, VOLUME FRACTION of QUENCHED MARTENSITE',
                '\t\t99, T_MARTENSITE, VOLUME FRACTION of TEMPERED MARTENSITE',
                '\t*User Material, constants=8, type=MECHANICAL',
                '\t\t1, 0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00'
                '**',
                '** ----------------------------------------------------------------',
                '*INCLUDE, INPUT = ' + self.interaction_property_file,
                '** ----------------------------------------------------------------',
                '** Set initial temperature',
                '*INITIAL CONDITIONS, TYPE=TEMPERATURE',
                '\tALL_NODES , ' + str(self.initial_temperature),
                '**',
                '** Set initial carbon content',
                '*INITIAL CONDITIONS, TYPE=FIELD, VAR=1',
                '\tALL_NODES , ' + str(self.initial_carbon),
                '**',
                '** Set analysis kinematics type to -8, (2 heating up kinetics, -2 cooling kinetics without tempering',
                '*INITIAL CONDITIONS, TYPE=FIELD, VAR=2',
                '\tALL_NODES , -8',
                '**',
                '*INCLUDE, INPUT = ' + self.include_file_directory + self.include_file_name + '_BC.inc']

    def _write_carburization_step(self, step_name, t1, t2, carbon):
        self.carbon_file_lines.append('*STEP,NAME=' + step_name + ', INC=10000')
        self.carbon_file_lines.append('\t' + step_name + ' - Total time: ' + str(t1) + ' - ' +
                                      str(t2) + 's, Carbon: ' + str(carbon) + '%')
        self.carbon_file_lines.append('\t*MASS DIFFUSION, DCMAX=0.001')
        self.carbon_file_lines.append('\\tt0.2,  ' + str(t2 - t1) + ', 1e-05,  10000')
        self.carbon_file_lines.append('\t*TEMPERATURE, AMPLITUDE=TEMP_AMPLITUDE')
        self.carbon_file_lines.append('\t\tAll_Nodes')
        self.carbon_file_lines.append('\t*BOUNDARY')
        self.carbon_file_lines.append('\t\tEXPOSED_NODES, 11, 11, ' + str(carbon / 100))
        self.carbon_file_lines.append('\t*MONITOR, NODE=monitor_node, DOF=11, FREQ=1')
        self.carbon_file_lines.append('\t*Output, field, frequency=1')
        self.carbon_file_lines.append('\t\t*Node Output')
        self.carbon_file_lines.append('\t\t\tNNC, NT')
        self.carbon_file_lines.append('\t\t*Element Output, directions=YES')
        self.carbon_file_lines.append('\t\t\tCONC')
        self.carbon_file_lines.append('\t\t*Element Output, directions=YES,  POSITION=NODES')
        self.carbon_file_lines.append('\t\t\tCONC')
        self.carbon_file_lines.append('*END STEP')

        self.thermal_file_lines.append('*STEP,NAME=' + step_name + ', INC=10000')
        self.thermal_file_lines.append('\t*HEAT TRANSFER, DELTMX=10.0, END=PERIOD')
        self.thermal_file_lines.append('\t\t0.01,  ' + str(t2 - t1) + ', 1e-05,  10000')
        self.thermal_file_lines.append('\t*CONTROLS, PARAMETERS = LINE SEARCH')
        self.thermal_file_lines.append('\t\t6,')
        self.thermal_file_lines.append('\t*CONTROLS, PARAMETERS = TIME INCREMENTATION')
        self.thermal_file_lines.append('\t\t20, 30')
        self.thermal_file_lines.append('*\tCONTROLS, FIELD = TEMPERATURE, PARAMETERS = FIELD')
        self.thermal_file_lines.append('\t\t0.05, 0.05')
        self.thermal_file_lines.append('\t*SFILM, OP = NEW, AMPLITUDE=TEMP_AMPLITUDE')
        self.thermal_file_lines.append('\t\tEXPOSED_SURFACE, F, 1.000000, ' + self.furnance_interaction_property)
        self.thermal_file_lines.append('\t*MONITOR, NODE = MONITOR_NODE, DOF=11, FREQ=1')
        self.thermal_file_lines.append('\t*RESTART, WRITE, FREQ=1000')
        self.thermal_file_lines.append('\t**')
        self.thermal_file_lines.append('\t*OUTPUT, FIELD, FREQ=200')
        self.thermal_file_lines.append('\t\t*ELEMENT OUTPUT')
        self.thermal_file_lines.append('\t\t\tSDV1, SDV21, SDV34, SDV47, SDV60, SDV73, SDV86, HFL')
        self.thermal_file_lines.append('\t*OUTPUT, FIELD, FREQ=10')
        self.thermal_file_lines.append('\t\t*NODE OUTPUT')
        self.thermal_file_lines.append('\t\t\tNT')
        self.thermal_file_lines.append('\t**')
        self.thermal_file_lines.append('*\tEL FILE, FREQUENCY=0')
        self.thermal_file_lines.append('*\tNODE FILE, FREQUENCY=1')
        self.thermal_file_lines.append('\t\tNT')
        self.thermal_file_lines.append('*\tEL PRINT, FREQ=0')
        self.thermal_file_lines.append('*\tNODE PRINT, FREQ=0')
        self.thermal_file_lines.append('\t**')
        self.thermal_file_lines.append('\t**')
        self.thermal_file_lines.append('*END STEP')

        self.mechanical_file_lines.append('*STEP,NAME=' + step_name + ', INC=10000')
        self.mechanical_file_lines.append('\tMechanical simulation')
        self.mechanical_file_lines.append('\t**')
        self.mechanical_file_lines.append('\t*STATIC')
        self.mechanical_file_lines.append('\t\t0.01,  ' + str(t2 - t1) + ', 1e-05,  10000')
        self.mechanical_file_lines.append('\t*TEMPERATURE, FILE=Toolbox_Thermal_' + self.name + '.odb, '
                                          'BSTEP=' + str(self.thermal_step_counter) + ', ESTEP=' +
                                          str(self.thermal_step_counter))
        self.mechanical_file_lines.append('\t** Add convergence control parameters')
        self.mechanical_file_lines.append('\t*CONTROLS, PARAMETERS = LINE  SEARCH')
        self.mechanical_file_lines.append('\t\t6,')
        self.mechanical_file_lines.append('\t*CONTROLS, PARAMETERS = TIME INCREMENTATION')
        self.mechanical_file_lines.append('\t\t20, 30')
        self.mechanical_file_lines.append('\t*CONTROLS, FIELD = DISPLACEMENT, PARAMETERS = FIELD')
        self.mechanical_file_lines.append('\t\t0.05, 0.05')
        self.mechanical_file_lines.append('\t**')
        self.mechanical_file_lines.append('\t** Add output variables')
        self.mechanical_file_lines.append('\t*RESTART, WRITE, FREQ = 1000')
        self.mechanical_file_lines.append('\t*MONITOR, NODE = MONITOR_NODE, DOF = 1, FREQ = 1')
        self.mechanical_file_lines.append('\t**')
        self.mechanical_file_lines.append('\t*OUTPUT, FIELD, FREQ = 10')
        self.mechanical_file_lines.append('\t\t*ELEMENT OUTPUT, directions = YES')
        self.mechanical_file_lines.append('\t\t\tS')
        self.mechanical_file_lines.append('\t**')
        self.mechanical_file_lines.append('\t*OUTPUT, FIELD, FREQ = 10')
        self.mechanical_file_lines.append('\t\t*ELEMENT OUTPUT')
        self.mechanical_file_lines.append('\t\t\tSDV1, SDV2, SDV5, SDV21, SDV34, SDV47, SDV60, SDV73, SDV86, SDV99')
        self.mechanical_file_lines.append('\t*OUTPUT, FIELD, FREQ = 10')
        self.mechanical_file_lines.append('\t\t*NODE OUTPUT')
        self.mechanical_file_lines.append('\t\tNT, U')
        self.mechanical_file_lines.append('*END  STEP')

        self.thermal_step_counter += 1

    def write_geometry_files(self):
        pass

    def write_files(self):
        self.carbon_file_lines = self._init_carbon_file_lines()
        self.thermal_file_lines = self._init_thermal_lines()
        self.mechanical_file_lines = self._init_mechanical_lines()

        # Add a heating step
        if self.heating_data.time is not None:
            self._write_carburization_step('Heating', self.total_time, self.total_time + self.heating_data.time,
                                           self.heating_data.carbon)
        # Add the carburization steps
        for i, carburization_step in enumerate(self.carburization_steps):
            step_name = 'Carburization - ' + str(i)
            self._write_carburization_step(step_name, self.total_time, self.total_time + carburization_step.time,
                                           carburization_step.carbon)


if __name__ == '__main__':
    mesh = '1x'
    simulation_directory = 'dante_quarter_1x'

    tempering = (180, 120)

    Simulation = namedtuple('Simulation', ['CD', 'times', 'temperatures', 'carbon', 'tempering'])
    simulations = [Simulation(CD=0.5, times=[75., 5., 60.], temperatures=(930., 930., 840.), carbon=(1.1, 0.8, 0.8),
                              tempering=tempering),
                   Simulation(CD=0.8, times=[135., 30., 60.], temperatures=(930., 930., 840.), carbon=(1.1, 0.8, 0.8),
                              tempering=tempering),
                   Simulation(CD=1.1, times=[370., 70., 60.], temperatures=(930., 930., 840.), carbon=(1.1, 0.8, 0.8),
                              tempering=tempering),
                   Simulation(CD=1.4, times=[545., 130., 60.], temperatures=(930., 930., 840.), carbon=(1.1, 0.8, 0.8),
                              tempering=tempering)]

    for simulation in simulations:
        toolbox_writer = CaseHardeningToolbox(name=str(simulation.CD).replace('.', '_' + '_quarter'))
        toolbox_writer.include_file_directory = '../'
        toolbox_writer.diffusion_file =